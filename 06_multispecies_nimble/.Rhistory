?glm
library(tidyverse)
library(lubridate)
# reading in data
dets <- read_csv('Raw Data.csv') %>%
mutate(begin_date_time = as.POSIXct(begin_date_time, tz = 'US/Eastern',
format = '%m/%d/%Y %H:%M')) %>%
rename(Camsite = title)
knitr::include_graphics('Figures/Coy-Deer.jpg')
knitr::include_graphics('Figures/Coy-Deer.jpg')
knitr::include_graphics('Figures/Coy-Deer.jpg')
knitr::include_graphics('Figures/Coy-Deer.jpg')
mosomData <- readRDS('msomData.rds')
rm(mosomData)
msomData <- readRDS('msomData.rds')
str(msomData)
head(msomData$y[1, , ]) # white-tailed deer
head(msomData$y[2, , ]) # coyote
msomConst <- readRDS('msomConst.rds')
str(msomConst)
head(msomConst$det_covs[1, 1, , ])
library(nimble)
library(nimble)
msomCode <- nimbleCode({
for(s in 1:S){
for(k in 1:(K_dets + 1)){
alpha_det[k, s] ~ dlogis(0, 1)
}
}
for(s in 1:(2 ^ S - 1)){
for(k in 1:(K_site + 1)){
beta_obs[k, s] ~ dlogis(0, 1)
}
}
for(i in 1:N){
f[i, 1] <- (x_s1[i, ] %*% beta_obs[, 1])[1, 1]
f[i, 2] <- (x_s2[i, ] %*% beta_obs[, 2])[1, 1]
f[i, 3] <- (x_in[i, ] %*% beta_obs[, 3])[1, 1]
psi[i, ] <- c(exp(sum(f[i, ])), exp(f[i, 1]), exp(f[i, 2]), exp(0))
Z[i] ~ dcat(psi[i, ])
for(j in 1:J){
logit(p1[i, j]) <- (det_covs[1, i, j, ] %*% alpha_det[, 1])[1, 1]
y[1, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 2)) * p1[i, j])
logit(p2[i, j]) <- (det_covs[2, i, j, ] %*% alpha_det[, 2])[1, 1]
y[2, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 3)) * p2[i, j])
}
}
})
msomInits <- list(Z = rep(1, msomConst$N))
msomDims <- list(beta_obs = c(msomConst$K_site + 1, 2 ^ msomConst$S - 1),
alpha_det = c(msomConst$K_dets + 1, msomConst$S),
logit_psi = c(msomConst$N, 2 ^ msomConst$S),
f = c(msomConst$N, 2 ^ msomConst$S - 1))
msimDims
msomDims
View(msomConst)
msomFit <- nimbleMCMC(code = msomCode, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims)
msomDims
msomDims <- list(beta_obs = c(msomConst$K_site + 1, 2 ^ msomConst$S - 1),
alpha_det = c(msomConst$K_dets + 1, msomConst$S),
psi = c(msomConst$N, 2 ^ msomConst$S),
f = c(msomConst$N, 2 ^ msomConst$S - 1))
msomDims
msomFit <- nimbleMCMC(code = msomCode, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims)
# this will take several minutes
msomFit <- nimbleMCMC(code = msomCode, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims,
nchains = 3, niter = 2000, nburnin = 1000)
MCMCvis::MCMCsummary(msomFit, round = 2)
msomInits <- list(Z = rep(1, msomConst$N),
alpha_det = matrix(rnorm(4), nrow = 2, ncol = 2))
msomDims <- list(beta_obs = c(msomConst$K_site + 1, 2 ^ msomConst$S - 1),
alpha_det = c(msomConst$K_dets + 1, msomConst$S),
psi = c(msomConst$N, 2 ^ msomConst$S),
f = c(msomConst$N, 2 ^ msomConst$S - 1))
# this will take several minutes
msomFit <- nimbleMCMC(code = msomCode, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims,
nchains = 3, niter = 2000, nburnin = 1000)
MCMCvis::MCMCsummary(msomFit, round = 2)
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'alpha_det')
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'alpha_det[1, 1]')
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'alpha_det[1,1]')
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'alpha_det')
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'alpha_det')
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'beta_det')
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'beta_obs')
msomInits <- list(Z = rep(1, msomConst$N))
msomDims <- list(beta_obs = c(msomConst$K_site + 1, 2 ^ msomConst$S - 1),
alpha_det = c(msomConst$K_dets + 1, msomConst$S),
psi = c(msomConst$N, 2 ^ msomConst$S),
f = c(msomConst$N, 2 ^ msomConst$S - 1))
msomDims
# this will take several minutes
msomFit <- nimbleMCMC(code = msomCode, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims,
nchains = 3, niter = 2000, nburnin = 1000)
saveRDS(msomFit, 'msomFit.rds')
msomFit <- readRDS('msomFit.rds')
?getwd()
getwd()
msomFit <- readRDS('msomFit.rds')
MCMCvis::MCMCsummary(msomFit, round = 2)
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'alpha_det')
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'beta_obs')
msomCode2 <- nimbleCode({
for(s in 1:S){
for(k in 1:(K_dets + 1)){
alpha_det[k, s] ~ dlogis(0, 1)
}
}
for(s in 1:(2 ^ S - 1)){
for(k in 1:(K_site + 1)){
beta_obs[k, s] ~ dlogis(0, 1)
}
}
alpha ~ dlogis(0, 1)
for(i in 1:N){
f[i, 1] <- (x_s1[i, ] %*% beta_obs[, 1])[1, 1]
f[i, 2] <- (x_s2[i, ] %*% beta_obs[, 2])[1, 1]
f[i, 3] <- (x_in[i, ] %*% beta_obs[, 3])[1, 1]
logit_psi[i, ] <- c(exp(sum(f[i, ])), exp(f[i, 1]), exp(f[i, 2]), exp(0))
Z[i] ~ dcat(logit_psi[i, ])
for(j in 1:J){
logit(p1[i, j]) <- (det_covs[1, i, j, ] %*% alpha_det[, 1])[1, 1] +
alpha * (equals(Z[i], 1) + equals(Z[i], 3))
y[1, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 2)) * p1[i, j])
logit(p2[i, j]) <- (det_covs[2, i, j, ] %*% alpha_det[, 2])[1, 1]
y[2, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 3)) * p2[i, j])
}
}
})
msomFit <- nimbleMCMC(code = msomCode2, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims,
nchains = 3, niter = 2000, nburnin = 1000)
msomCode2 <- nimbleCode({
for(s in 1:S){
for(k in 1:(K_dets + 1)){
alpha_det[k, s] ~ dlogis(0, 1)
}
}
for(s in 1:(2 ^ S - 1)){
for(k in 1:(K_site + 1)){
beta_obs[k, s] ~ dlogis(0, 1)
}
}
alpha ~ dlogis(0, 1)
for(i in 1:N){
f[i, 1] <- (x_s1[i, ] %*% beta_obs[, 1])[1, 1]
f[i, 2] <- (x_s2[i, ] %*% beta_obs[, 2])[1, 1]
f[i, 3] <- (x_in[i, ] %*% beta_obs[, 3])[1, 1]
psi[i, ] <- c(exp(sum(f[i, ])), exp(f[i, 1]), exp(f[i, 2]), exp(0))
Z[i] ~ dcat(psi[i, ])
for(j in 1:J){
logit(p1[i, j]) <- (det_covs[1, i, j, ] %*% alpha_det[, 1])[1, 1] +
alpha * (equals(Z[i], 1) + equals(Z[i], 3))
y[1, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 2)) * p1[i, j])
logit(p2[i, j]) <- (det_covs[2, i, j, ] %*% alpha_det[, 2])[1, 1]
y[2, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 3)) * p2[i, j])
}
}
})
msomFit <- nimbleMCMC(code = msomCode2, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims,
nchains = 3, niter = 2000, nburnin = 1000)
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'alpha_det')
MCMCvis::MCMCsummary(msomFit, round = 2)
MCMCvis::MCMCtrace(msomFit, pdf = F, params = 'beta_obs')
MCMCvis::MCMCsummary(msomFit, round = 2)
exp(46.1/-10)
exp(1/-10)
exp(0/-10)
exp(10/-10)
exp(10/-0.5)
?glm
setwd("~/OneDrive - West Virginia University/Documents/Presentations/2024/Alaska/multispecies-workshop-fairbanks/06_multispecies_nimble")
msomData <- readRDS('msomConst.rds')
msomData <- readRDS('msomData.rds')
str(msomData)
head(y[1, , ])
head(msomData$y[1, , ])
head(msomData$y[2, , ])
msomConst <- readRDS('msomConst.rds')
str(msomConst)
head(msomConst$x_s1)
head(msomConst$x_s2)
head(msomConst$x_in)
dim(msomConst$det_covs)
head(msomConst$det_covs[1, , , ])
head(msomConst$det_covs[1, 1, , ])
library(nimble)
msomCode <- nimbleCode({
for(s in 1:S){
for(k in 1:(K_dets + 1)){
alpha_det[k, s] ~ dlogis(0, 1)
}
}
for(s in 1:S){
for(k in 1:(K_site + 1)){
beta_obs[k, s] ~ dlogis(0, 1)
}
}
for(i in 1:N){
f[i, 1] <- (x_s1[i, ] %*% beta_obs[, 1])[1, 1]
f[i, 2] <- (x_s2[i, ] %*% beta_obs[, 2])[1, 1]
f[i, 3] <- 0
psi[i, ] <- c(exp(sum(f[i, ])), exp(f[i, 1]), exp(f[i, 2]), exp(0))
Z[i] ~ dcat(psi[i, ])
for(j in 1:J){
logit(p1[i, j]) <- (det_covs[1, i, j, ] %*% alpha_det[, 1])[1, 1]
y[1, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 2)) * p1[i, j])
logit(p2[i, j]) <- (det_covs[2, i, j, ] %*% alpha_det[, 2])[1, 1]
y[2, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 3)) * p2[i, j])
}
}
})
msomInits <- list(Z = rep(1, msomConst$N))
msomDims <- list(beta_obs = c(msomConst$K_site + 1, msomConst$S),
alpha_det = c(msomConst$K_dets + 1, msomConst$S),
psi = c(msomConst$N, 2 ^ msomConst$S),
f = c(msomConst$N, 2 ^ msomConst$S - 1))
msomDims
msomFit1 <- nimbleMCMC(code = msomCode, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims,
nchains = 3, niter = 2000, nburnin = 1000)
MCMCvis::MCMCtrace(msomFit1, pdf = F, params = 'alpha_det')
MCMCvis::MCMCtrace(msomFit1, pdf = F, params = 'beta_obs')
MCMCvis::MCMCsummary(msomFit1, round = 2)
msomDims2 <- list(beta_obs = c(msomConst$K_site + 1, 2 ^ msomConst$S - 1),
alpha_det = c(msomConst$K_dets + 1, msomConst$S),
psi = c(msomConst$N, 2 ^ msomConst$S),
f = c(msomConst$N, 2 ^ msomConst$S - 1))
msomDims2
msomCode2 <- nimbleCode({
for(s in 1:S){
for(k in 1:(K_dets + 1)){
alpha_det[k, s] ~ dlogis(0, 1)
}
}
for(s in 1:(2 ^ S - 1)){
for(k in 1:(K_site + 1)){
beta_obs[k, s] ~ dlogis(0, 1)
}
}
for(i in 1:N){
f[i, 1] <- (x_s1[i, ] %*% beta_obs[, 1])[1, 1]
f[i, 2] <- (x_s2[i, ] %*% beta_obs[, 2])[1, 1]
f[i, 3] <- (x_in[i, ] %*% beta_obs[, 3])[1, 1]
psi[i, ] <- c(exp(sum(f[i, ])), exp(f[i, 1]), exp(f[i, 2]), exp(0))
Z[i] ~ dcat(psi[i, ])
for(j in 1:J){
logit(p1[i, j]) <- (det_covs[1, i, j, ] %*% alpha_det[, 1])[1, 1]
y[1, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 2)) * p1[i, j])
logit(p2[i, j]) <- (det_covs[2, i, j, ] %*% alpha_det[, 2])[1, 1]
y[2, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 3)) * p2[i, j])
}
}
})
msomDims2
msomFit2 <- nimbleMCMC(code = msomCode2, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims2,
nchains = 3, niter = 2000, nburnin = 1000)
MCMCvis::MCMCtrace(msomFit2, pdf = F, params = 'alpha_det')
MCMCvis::MCMCtrace(msomFit2, pdf = F, params = 'beta_obs')
MCMCvis::MCMCsummary(msomFit2, round = 2)
msomCode3 <- nimbleCode({
for(s in 1:S){
for(k in 1:(K_dets + 1)){
alpha_det[k, s] ~ dlogis(0, 1)
}
}
for(s in 1:(2 ^ S - 1)){
for(k in 1:(K_site + 1)){
beta_obs[k, s] ~ dlogis(0, 1)
}
}
delta ~ dlogis(0, 1)
for(i in 1:N){
f[i, 1] <- (x_s1[i, ] %*% beta_obs[, 1])[1, 1]
f[i, 2] <- (x_s2[i, ] %*% beta_obs[, 2])[1, 1]
f[i, 3] <- (x_in[i, ] %*% beta_obs[, 3])[1, 1]
psi[i, ] <- c(exp(sum(f[i, ])), exp(f[i, 1]), exp(f[i, 2]), exp(0))
Z[i] ~ dcat(psi[i, ])
for(j in 1:J){
logit(p1[i, j]) <- (det_covs[1, i, j, ] %*% alpha_det[, 1])[1, 1]
y[1, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 2)) * p1[i, j]) +
delta * equals(Z[i], 1)
logit(p2[i, j]) <- (det_covs[2, i, j, ] %*% alpha_det[, 2])[1, 1]
y[2, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 3)) * p2[i, j])
}
}
})
msomFit3 <- nimbleMCMC(code = msomCode3, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims2,
nchains = 3, niter = 2000, nburnin = 1000)
msomCode3 <- nimbleCode({
for(s in 1:S){
for(k in 1:(K_dets + 1)){
alpha_det[k, s] ~ dlogis(0, 1)
}
}
for(s in 1:(2 ^ S - 1)){
for(k in 1:(K_site + 1)){
beta_obs[k, s] ~ dlogis(0, 1)
}
}
delta ~ dlogis(0, 1)
for(i in 1:N){
f[i, 1] <- (x_s1[i, ] %*% beta_obs[, 1])[1, 1]
f[i, 2] <- (x_s2[i, ] %*% beta_obs[, 2])[1, 1]
f[i, 3] <- (x_in[i, ] %*% beta_obs[, 3])[1, 1]
psi[i, ] <- c(exp(sum(f[i, ])), exp(f[i, 1]), exp(f[i, 2]), exp(0))
Z[i] ~ dcat(psi[i, ])
for(j in 1:J){
logit(p1[i, j]) <- (det_covs[1, i, j, ] %*% alpha_det[, 1])[1, 1] +
delta * equals(Z[i], 1)
y[1, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 2)) * p1[i, j])
logit(p2[i, j]) <- (det_covs[2, i, j, ] %*% alpha_det[, 2])[1, 1]
y[2, i, j] ~ dbern((equals(Z[i], 1) + equals(Z[i], 3)) * p2[i, j])
}
}
})
msomFit3 <- nimbleMCMC(code = msomCode3, constants = msomConst,
data = msomData, inits = msomInits,
dimensions = msomDims2,
nchains = 3, niter = 2000, nburnin = 1000)
disturbance_pred <- seq(min(msomConst$x_s1[, 'Disturbance']),
max(msomConst$x_s1[, 'Disturbance']),
length.out = 100)
disturbance_pred
samples <- rbind(msomFit2$chain1, msomFit2$chain2, msomFit2$chain3)
head(samples)
psi_disturbance <- array(dim = c(nrow(samples), length(disturbance_pred),
2 ^ msomConst$S))
marginal_bobcat <- matrix(nrow = nrow(samples),
ncol = length(disturbance_pred))
i=1
j=1
f[1, i, j] <- samples[i, 'beta_obs[1, 1]'] + samples[i, 'beta_obs[2, 1]'] *
disturbance_pred[j]
psi_disturbance <- array(dim = c(nrow(samples), length(disturbance_pred),
2 ^ msomConst$S))
f <- array(dim = c(3, nrow(samples), length(disturbance_pred)))
marginal_bobcat <- matrix(nrow = nrow(samples),
ncol = length(disturbance_pred))
f[1, i, j] <- samples[i, 'beta_obs[1, 1]'] + samples[i, 'beta_obs[2, 1]'] *
disturbance_pred[j]
f[2, i, j] <- samples[i, 'beta_obs[1, 2]'] # assuming mean of house dens
f[3, i, j] <- samples[i, 'beta_obs[1, 3]'] # assuming no hunting
LDATS::softmax(c(sum(f[, i, j]), f[1, i, j], f[2, i, j], 0))
for(i in 1:nrow(samples)){
for(j in 1:length(disturbance_pred)){
f[1, i, j] <- samples[i, 'beta_obs[1, 1]'] + samples[i, 'beta_obs[2, 1]'] *
disturbance_pred[j]
f[2, i, j] <- samples[i, 'beta_obs[1, 2]'] # assuming mean of house dens
f[3, i, j] <- samples[i, 'beta_obs[1, 3]'] # assuming no hunting
psi_disturbance[i, j, ] <-
LDATS::softmax(c(sum(f[, i, j]), f[1, i, j], f[2, i, j], 0))
marginal_bobcat[i, j] <- psi_disturbance[i, j, 1] + # bobcat and red fox
psi_disturbance[i, j, 2] # bobcat only
}
}
bobcat_df <- data.frame(
Disturbance = disturbance_pred,
Occupancy = apply(marginal_bobcat, 2, mean),
low = apply(marginal_bobcat, 2, quantile, probs = 0.025),
high = apply(marginal_bobcat, 2, quantile, probs = 0.975)
)
head(bobcat_df)
library(ggplot2)
ggplot(bobcat_df, aes(Disturbance, Occupancy))
ggplot(bobcat_df, aes(Disturbance, Occupancy)) +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.5)
ggplot(bobcat_df, aes(Disturbance, Occupancy)) +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.5) +
geom_line()
ggplot(bobcat_df, aes(Disturbance, Occupancy)) +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.5) +
geom_line() +
theme(text = element_text(size = 20)) +
ylab('Bobcat marginal occupancy')
bobcat_fox_pre <- matrix(nrow = nrow(samples), ncol = length(disturbance_pred))
for(i in 1:nrow(samples)){
for(j in 1:length(disturbance_pred)){
bobcat_fox_pre[i, j] <- psi_disturbance[i, j, 1] /
(psi_disturbance[i, j, 1] + psi_disturbance[i, j, 3])
}
}
bobcat_fox_pre_df <- data.frame(
Disturbance = disturbance_pred,
Occupancy = apply(bobcat_fox_pre, 2, mean),
low = apply(bobcat_fox_pre, 2, quantile, probs = 0.025),
high = apply(bobcat_fox_pre, 2, quantile, probs = 0.975)
)
head(bobcat_fox_pre_df)
bobcat_fox_pre_fig <- ggplot(bobcat_fox_pre_df, aes(Disturbance, Occupancy)) +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.5) +
geom_line() +
theme(text = element_text(size = 20)) +
ylab('Bobcat occupancy conditional\non red fox present')
bobcat_fox_pre_fig
bobcat_fox_abs <- matrix(nrow = nrow(samples), ncol = length(disturbance_pred))
for(i in 1:nrow(samples)){
for(j in 1:length(disturbance_pred)){
bobcat_fox_abs[i, j] <- psi_disturbance[i, j, 2] /
(psi_disturbance[i, j, 2] + psi_disturbance[i, j, 4])
}
}
bobcat_fox_abs_df <- data.frame(
Disturbance = disturbance_pred,
Occupancy = apply(bobcat_fox_abs, 2, mean),
low = apply(bobcat_fox_abs, 2, quantile, probs = 0.025),
high = apply(bobcat_fox_abs, 2, quantile, probs = 0.975)
)
head(bobcat_fox_abs_df)
bobcat_fox_abs_fig <- ggplot(bobcat_fox_abs_df, aes(Disturbance, Occupancy)) +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.5) +
geom_line() +
theme(text = element_text(size = 20)) +
ylab('Bobcat occupancy conditional\non red fox absent')
bobcat_fox_abs_fig
library(tidyverse)
bobcat_conditional <- bobcat_fox_pre_df %>% bind_rows(bobcat_fox_abs_df) %>%
mutate(redfox = factor(rep(c('Red fox present', 'Red fox absent'),
each = nrow(bobcat_fox_pre_df))))
head(bobcat_conditional)
tail(bobcat_conditional)
ggplot(bobcat_conditional, aes(Disturbance, Occupancy)) +
facet_grid(cols = vars(redfox))
ggplot(bobcat_conditional, aes(Disturbance, Occupancy)) +
facet_grid(cols = vars(redfox)) +
geom_ribbon(aes(ymin = low, ymax = high), alpha = 0.5) +
geom_line() + ylab('Bobcat conditional occupancy') +
theme(text = element_text(size = 20))
